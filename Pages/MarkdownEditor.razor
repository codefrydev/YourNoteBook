@page "/markdown-editor"
@layout EditorLayout
@using Markdig
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="max-w-full">
    <header class="bg-white dark:bg-gray-800 shadow-sm p-4 mb-4">
        <div class="flex justify-end">
            <button @onclick="DownloadMarkdown" class="btn btn-primary">
                <span class="mr-2">ðŸ’¾</span>Download
            </button>
        </div>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4">
        <div class="card">
            <div class="p-4">
                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Editor</h3>
                <textarea @bind="MarkdownContent"
                          placeholder="Start writing your markdown here..."
                          rows="20"
                          class="input resize-none font-mono text-sm"></textarea>
            </div>
        </div>

        <div class="card">
            <div class="p-4">
                <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Preview</h3>
                <div class="prose dark:prose-invert max-w-none" @ref="_previewElement">
                    @((MarkupString)RenderedHtml)
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference _previewElement;
    private string MarkdownContent { get; set; } = "";
    private string RenderedHtml => Markdown.ToHtml(MarkdownContent ?? "");
    private DotNetObjectReference<MarkdownEditor>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await LoadSavedContent();
        }
        await HighlightCode();
    }

    private async Task LoadSavedContent()
    {
        var content = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "markdownContent");
        if (!string.IsNullOrEmpty(content))
        {
            MarkdownContent = content;
            StateHasChanged();
        }
    }

    private async Task HighlightCode()
    {
        await JsRuntime.InvokeVoidAsync("hljs.highlightAll");
    } 
    private async Task DownloadMarkdown()
    {
        const string fileName = "document.md";
        var fileContent = MarkdownContent;
        await JsRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}
